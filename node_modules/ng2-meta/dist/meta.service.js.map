{"version":3,"file":"meta.service.js","sourceRoot":"","sources":["../src/meta.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, Optional } from '@angular/core';\nimport { Title, DOCUMENT } from '@angular/platform-browser';\nimport { Router, NavigationEnd, Event as NavigationEvent, ActivatedRoute } from '@angular/router';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\n\nimport { META_CONFIG } from './meta.module';\nimport { MetaConfig } from './models/meta-config';\n\nconst isDefined = (val: any) => typeof val !== 'undefined';\n\n@Injectable()\nexport class MetaService {\n  constructor(private router: Router, @Inject(DOCUMENT) private document: any, private titleService: Title, private activatedRoute: ActivatedRoute,\n              @Inject(META_CONFIG) private metaConfig: MetaConfig) {\n    this.router.events\n      .filter(event => (event instanceof NavigationEnd))\n      .map(() => this._findLastChild(this.activatedRoute))\n      .subscribe((routeData: any) => {\n        this._updateMetaTags(routeData.meta);\n      });\n  }\n\n  private _findLastChild(activatedRoute: ActivatedRoute) {\n    const snapshot = activatedRoute.snapshot;\n\n    let child = snapshot.firstChild;\n    while (child.firstChild !== null) {\n      child = child.firstChild;\n    }\n\n    return child.data;\n  }\n\n  private _getOrCreateMetaTag(name: string): HTMLElement {\n    let el: HTMLElement = this.document.querySelector(`meta[name='${name}']`);\n    if (!el) {\n      el = this.document.createElement('meta');\n      el.setAttribute('name', name);\n      this.document.head.appendChild(el);\n    }\n    return el;\n  }\n\n  private _updateMetaTags(meta: any = {}) {\n\n    if (meta.disableUpdate) {\n      return false;\n    }\n\n    this.setTitle(meta.title, meta.titleSuffix);\n\n    Object.keys(meta).forEach(key => {\n      if (key === 'title' || key === 'titleSuffix') {\n        return;\n      }\n      this.setTag(key, meta[key]);\n    });\n\n    Object.keys(this.metaConfig.defaults).forEach(key => {\n      if (key in meta || key === 'title' || key === 'titleSuffix') {\n        return;\n      }\n      this.setTag(key, this.metaConfig.defaults[key]);\n    });\n  }\n\n  setTitle(title?: string, titleSuffix?: string): MetaService {\n    const titleElement = this._getOrCreateMetaTag('title');\n    const ogTitleElement = this._getOrCreateMetaTag('og:title');\n    let titleStr = isDefined(title) ? title : (this.metaConfig.defaults['title'] || '');\n    if (this.metaConfig.useTitleSuffix) {\n      titleStr += isDefined(titleSuffix) ? titleSuffix : (this.metaConfig.defaults['titleSuffix'] || '');\n    }\n\n    titleElement.setAttribute('content', titleStr);\n    ogTitleElement.setAttribute('content', titleStr);\n    this.titleService.setTitle(titleStr);\n    return this;\n  }\n\n  setTag(tag: string, value: string): MetaService {\n    if (tag === 'title' || tag === 'titleSuffix') {\n      throw new Error(`Attempt to set ${tag} through 'setTag': 'title' and 'titleSuffix' are reserved tag names.\n      Please use 'MetaService.setTitle' instead`);\n    }\n    const tagElement = this._getOrCreateMetaTag(tag);\n    let tagStr = isDefined(value) ? value : (this.metaConfig.defaults[tag] || '');\n    tagElement.setAttribute('content', tagStr);\n    if (tag === 'description') {\n      let ogDescElement = this._getOrCreateMetaTag('og:description');\n      ogDescElement.setAttribute('content', tagStr);\n    }\n    return this;\n  }\n}\n"]}